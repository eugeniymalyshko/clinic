"use strict";

//---------- Device type-------------------

function isMobile() {
  const regex =
    /Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;
  return regex.test(navigator.userAgent);
}

if (isMobile()) {
  document.body.classList.add("_touch");
  //   const menusArrows = document.querySelectorAll(".menu__arrow");
  const menusHub = document.querySelectorAll(".menu__link_hub");

  if (menusHub.length > 0) {
    for (let index = 0; index < menusHub.length; index++) {
      const menuHub = menusHub[index];
      menuHub.addEventListener("click", function (e) {
        menuHub.parentElement.classList.toggle("_active");
      });
    }
  }
} else {
  document.body.classList.add("_pc");
}

document.addEventListener("DOMContentLoaded", () => {
  // Menu burger
  const menuIcon = document.querySelector(".menu__icon");
  const body = document.querySelector("body");
  const menuBody = document.querySelector(".menu__body");

  menuIcon.addEventListener("click", () => {
    menuIcon.classList.toggle("_active");
    menuBody.classList.toggle("_active");
    body.classList.toggle("_lock");
  });
  // ===============================================================
  //   Footer menu
  const footerLinks = document.querySelectorAll(".list-footer__title");
  footerLinks.forEach((footerLink) => {
    footerLink.addEventListener("click", () => {
      const footerSubList = document.querySelector(".list-footer__sub-list");
      footerLink.classList.toggle("_active");
      footerSubList.classList.toggle("_active");
    });
  });
  // ===============================================================
  //   resize header on scroll
  const header = document.querySelector(".header");
  window.addEventListener("scroll", () => {
    const scrollY = window.scrollY;
    if (scrollY >= 90) {
      header.classList.add("_scroll");
    } else {
      header.classList.remove("_scroll");
    }
  });
  // ===============================================================
  // Accordion
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".accordion").forEach((acc) => {
      acc.querySelectorAll(".accordion__button").forEach((btn) => {
        const panel = getPanel(btn);
        if (!panel) return;
        const open = btn.getAttribute("aria-expanded") === "true";
        panel.hidden = !open;
      });
    });
  });

  document.addEventListener("click", (e) => {
    const btn = e.target.closest(".accordion__button");
    if (!btn) return;

    const acc = btn.closest(".accordion");
    if (!acc) return;

    const isSingle = acc.hasAttribute("data-single");
    const wasOpen = btn.getAttribute("aria-expanded") === "true";
    const willOpen = !wasOpen;

    const startH = acc.offsetHeight;

    setOpen(btn, willOpen);

    if (isSingle && willOpen) {
      acc
        .querySelectorAll('.accordion__button[aria-expanded="true"]')
        .forEach((b) => {
          if (b !== btn) setOpen(b, false);
        });
    }

    requestAnimationFrame(() => {
      const endH = acc.offsetHeight;
      lockHeightTransition(acc, startH, endH);

      // üü¢ –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –≤—ñ–¥–∫—Ä–∏—Ç–æ–≥–æ —Ç–∞–±—É
      if (willOpen) {
        // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞, —â–æ–± –≤–∏—Å–æ—Ç–∞ –≤—Å—Ç–∏–≥–ª–∞ –∑–º—ñ–Ω–∏—Ç–∏—Å—å
        setTimeout(() => {
          const offset = 70; // –≤—ñ–¥—Å—Ç—É–ø –∑–≤–µ—Ä—Ö—É, —è–∫—â–æ —î —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ö–µ–¥–µ—Ä
          const y = btn.getBoundingClientRect().top + window.scrollY - offset;
          window.scrollTo({ top: y, behavior: "smooth" });
        }, 250);
      }
    });
  });

  function getPanel(btn) {
    const id = btn.getAttribute("aria-controls");
    return id ? document.getElementById(id) : null;
  }

  function setOpen(btn, open) {
    btn.setAttribute("aria-expanded", String(open));
    const panel = getPanel(btn);
    if (panel) panel.hidden = !open;
  }

  function lockHeightTransition(acc, start, end) {
    if (start === end) return;
    const prevTransition = acc.style.transition;
    if (!acc.style.transition) acc.style.transition = "height .28s ease";
    acc.style.height = `${start}px`;
    void acc.offsetHeight;
    acc.style.height = `${end}px`;
    acc.addEventListener(
      "transitionend",
      () => {
        acc.style.height = "";
        acc.style.transition = prevTransition;
      },
      { once: true }
    );
  }
  // ===============================================================

  // Map
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç—É
  let map = L.map("map", { scrollWheelZoom: false }).setView(
    [50.45059074295707, 30.378224474472542],
    16
  );

  // –î–æ–¥–∞—î–º–æ —à–∞—Ä–∏ –∑ OSM
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    maxZoom: 20,
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OSM</a> contributors',
  }).addTo(map);

  // –î–æ–¥–∞—î–º–æ –º–∞—Ä–∫–µ—Ä
  L.marker([50.45059074295707, 30.378224474472542])
    .addTo(map)
    //   .bindPopup("<b>–ö–º–∫–ª ‚Ññ5</b><br>")
    .openPopup();
});
// ===============================================================
